# VIBECODER-SECURE MCP - Python Project Configuration
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vibecoder-secure-mcp"
version = "1.0.0"
description = "Secure document pipeline with integrity validation and audit capabilities for Vibecoder workflows"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Vibecoder Team", email = "vibecoder@example.com"}
]
keywords = ["vibecoder", "mcp", "security", "integrity", "automation", "ai-handover"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pyyaml>=6.0",
    "gitpython>=3.1.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.0.0",
]
full = [
    "cryptography>=41.0.0",
    "mistune>=3.0.0",
    "openai>=1.0.0",
    "langchain>=0.1.0",
    "redis>=4.5.0",
    "python-gitlab>=3.15.0",
]

[project.urls]
Homepage = "https://github.com/vibecoder/vibecoder-secure-mcp"
Repository = "https://github.com/vibecoder/vibecoder-secure-mcp"
Documentation = "https://github.com/vibecoder/vibecoder-secure-mcp/tree/main/docs"
"Bug Tracker" = "https://github.com/vibecoder/vibecoder-secure-mcp/issues"

[project.scripts]
vibecoder-mcp = "main:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["agents*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yml", "*.yaml", "*.toml", "*.md"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]